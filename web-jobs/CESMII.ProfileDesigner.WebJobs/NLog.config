<?xml version="1.0" encoding="utf-8" ?>
<!--
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      internalLogFile="${basedir}\logs\nlogInternal.txt"
      throwConfigExceptions="true"
      internalLogLevel="Trace"
      autoReload="true">
-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  throwConfigExceptions="true"
	  autoReload="true">

	<!-- enable asp.net core layout renderers -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
	</extensions>

	<!-- Set connectionString, appName in startup.cs-->
	<!-- the targets to write to -->
	<targets>
		<target name="_logConsole" xsi:type="Console"
                layout="${level:truncate=4:tolower=true}\: ${logger}[0]${newline}      ${message}${exception:format=tostring}" />

		<target name="_logAll" xsi:type="File"
                fileName="${basedir}\logs\${var:appName}-MVC.log"
                layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}" />
		<target name="_logRotate" xsi:type="File"
                fileName="${basedir}\logs\${var:appName}-MVC-Details.log"
                layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|${callsite}| body: ${aspnet-request-posted-body}"
                archiveFileName="${basedir}\logs\${var:appName}-MVC-log-{#}.log"
                archiveNumbering="DateAndSequence"
                archiveDateFormat="yyyy-MM-dd"
                archiveAboveSize="1024000"
                maxArchiveFiles="30"
                concurrentWrites="true" />

		<!--Log Errors to the database (PostreSql)-->
		<target name="_logDatabasePg" xsi:type="Database"
                dbProvider="Npgsql.NpgsqlConnection, Npgsql"
                connectionString="${var:connectionString}" >
			<commandText>
				insert into public.app_log ("application", "host_name", "message", "exception_message", "level", "logger", "type", "call_site", "inner_exception")
				values (@application, @host, @message, @exceptionMessage, @level, @logger, @type, @callsite, @innerException);
			</commandText>
			<parameter name="@application" layout="${var:appName}" />
			<parameter name="@exceptionMessage" layout="${exception:format=message}" />
			<parameter name="@level" layout="${level}" />
			<parameter name="@host" layout="${hostname}" />
			<parameter name="@logger" layout="${logger}" />
			<parameter name="@type" layout="${exception:format=type}" />
			<parameter name="@callsite" layout="${callsite}" />
			<parameter name="@exception" layout="${exception:format=tostring}" />
			<parameter name="@stackTrace" layout="${exception:format=stackTrace}" />
			<parameter name="@innerException"
                        layout="${exception:format=:innerFormat=ShortType,Message,Method:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}" />
			<parameter name="@message" layout="${message}" />
		</target>

		<target name="_logFile_DBCommands" xsi:type="File"
                fileName="${basedir}\logs\${var:appName}-Sql.log"
                layout="${longdate}|${uppercase:${level}}|${logger}|${newline}${message} ${newline}${newline}"
                archiveFileName="${basedir}\logs\${var:appName}-Sql-{#}.log"
                archiveNumbering="DateAndSequence"
                archiveDateFormat="yyyy-MM-dd"
                archiveAboveSize="102400"
                maxArchiveFiles="2"
                concurrentWrites="true" />
	</targets>

	<!-- rules to map from logger name to target -->
	<rules>
		<!--All logs, including from Microsoft-->
		<logger name="*" minlevel="Warn" writeTo="_logAll" />

		<!--Output hosting lifetime messages to console target for faster startup detection -->
		<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="_logConsole" final="true" />

		<!--<logger name="*" minlevel="Info" writeTo="_logRotate" />-->
		<!--Write only warnings and errors to DB to keep table size manageable -->
		<logger name="*" minlevel="Warn" writeTo="_logDatabasePg" final="true" />
		<!--Uncomment this if you want to write the queries being executed against the DB to the log table in the DB -->
		<logger name="Microsoft.EntityFrameworkCore.*" minlevel="Trace" writeTo="_logFile_DBCommands" />
		<logger name="Npgsql.EntityFrameworkCore.*" minlevel="Trace" writeTo="_logFile_DBCommands" />

		<!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
		<logger name="Microsoft.*" maxlevel="Info" final="true" />
		<logger name="System.Net.Http.*" maxlevel="Info" final="true" />

	</rules>
</nlog>