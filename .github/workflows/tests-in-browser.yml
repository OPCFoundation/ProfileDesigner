# CESMII Profile Designer - Setup and test Profile Designer Web Page using Selenium Tests
#
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: Test|In Browser|Profile Designer
on:
  #manually trigger deploy
  workflow_dispatch:
  # Trigger the workflow on push
  #push:
  #  branches:
  #    - develop
  #    - main
  #pull_request:
  #  branches:
  #    - develop
  #    - main

env:
  # Flags that is set automatically to determine whether we 
  # are running on Github.com or within nektos/act (on Desktop).
  ONGITHUB: true

  # Main project path
  PROFILEDESIGNER_PROJECT_DIRECTORY: './api/CESMII.ProfileDesigner.Api/'
  # Main project file name
  PROFILEDESIGNER_PROJECT_FILE: 'CESMII.ProfileDesigner.Api.csproj'
  # Main project fqn
  PROFILEDESIGNER_PROJECT_FQDN: './api/CESMII.ProfileDesigner.Api/CESMII.ProfileDesigner.Api.csproj'
  

  # set this to the .NET core version to use
  NETCORE_VERSION: "6.0.x"
  # set this to the NODE JS version to use
  NODEJS_VERSION: "16.17.0"
  # set this to npm working directory
  NPM_WORKING_DIRECTORY: 'frontend'

  PROFILEDESIGNER_BRIDGE_CONNECTION: "http://XX.XX.XX.XX"


jobs:
  runner-job:
    runs-on: ubuntu-latest
    steps:
    # Automating the setting of a flag that helps resolves
    # differences between Github Actions on github.com and
    # using nektos/act on Windows using Docker Desktop.
    - name: 0__Github - Update ONGITHUB Flag
      if: github.actor == 'nektos/act'
      run: echo "ONGITHUB=false" >> $GITHUB_ENV

    - name: 1__ProfileDesigner API - Check out the repo
      uses: actions/checkout@v3
      with:
        submodules: true

    # Create bridge network for communication between containers
    - name: 2__Docker - Set up networking
      run: |
          docker network remove --force mysubnet1 ;
          docker network create mysubnet1 ;

    - name: 3__Database - Create postgres container
      run: |
        docker run --name MyPostgres -e POSTGRES_PASSWORD=password -p 5432:5432  --network mysubnet1 -d postgres:14.10

    - name: 4__Database - Add SUDO command to container MyPostgres
      run: | 
        docker exec -i MyPostgres apt update
        docker exec -i MyPostgres apt install sudo

    # # # - name: 5__Database - Create user
    # # #   run: |
    # # #     docker exec -i MyPostgres sudo -u postgres psql --command="CREATE USER profiledesigner SUPERUSER PASSWORD 'cesmii'" --command="\du"

    # # # - name: 6__Database - List existing databases
    # # #   run: |
    # # #     docker exec -i MyPostgres sudo -u postgres psql -l

    # # # - name: 7__Database - Create database
    # # #   run: |
    # # #     docker exec -i MyPostgres sudo -u postgres psql --command="CREATE DATABASE profile_designer_local_test WITH OWNER = profiledesigner TABLESPACE = pg_default CONNECTION LIMIT = -1;"

    # # # - name: 8__Database - Create schema
    # # #   run: |
    # # #     ls -l ./sql
    # # #     head -5 ./sql/CESMII.ProfileDesigner.DB.sql
    # # #     docker exec -i MyPostgres sudo -u postgres psql -d profile_designer_local_test < ./sql/CESMII.ProfileDesigner.DB.sql
    # # #     #sudo -u postgres psql -d profile_designer_local_test --file ./sql/CESMII.ProfileDesigner.DB.sql

    # # # - name: 9__Database - List existing databases
    # # #   run: |
    # # #     docker exec -i MyPostgres sudo -u postgres psql -l

    # # # - name: 10__ProfileDesigner API - Set up dotnet core ${{ env.NETCORE_VERSION }}
    # # #   uses: actions/setup-dotnet@v3
    # # #   with:
    # # #     dotnet-version: ${{ env.NETCORE_VERSION }}

    # # # # Profile Designer API
    # # # - name: 11__ProfileDesigner - Restore dependencies (${{env.PROFILEDESIGNER_PROJECT_FQDN}})
    # # #   run: dotnet restore ${{env.PROFILEDESIGNER_PROJECT_FILE}}
    # # #   working-directory: ${{env.PROFILEDESIGNER_PROJECT_DIRECTORY}}

    # # # # Publish the app and the tests
    # # # - name: 12__ProfileDesigner - Publish Profile Designer Api
    # # #   run: |
    # # #     dotnet publish --framework:net6.0 ${{env.PROFILEDESIGNER_PROJECT_FQDN}} -c Release -o ./publish ;

    # # # # Create a Docker Container for Api
    # # # - name: 13__ProfileDesigner - Build Docker Image CESMII.ProfileDesigner.Api
    # # #   run: docker build -f "./api/CESMII.ProfileDesigner.Api/Dockerfile" --force-rm -t profile-designer-api:dev --target base  --label "com.microsoft.created-by=visual-studio" --label "com.microsoft.visual-studio.project-name=CESMII.ProfileDesigner.Api" "./"

    # # # # Run one of these two
    # # # # Start Profile Designer Container (On Github)
    # # # - name: 14__ProfileDesigner - Start the Container (On Github)
    # # #   if: env.ONGITHUB == 'true'
    # # #   run: |
    # # #        docker run -dt --name CESMII.ProfileDesigner.Api --network mysubnet1 -v "/home/runner/work/ProfileDesigner/ProfileDesigner/api/CESMII.ProfileDesigner.Api:/app" -v "/home/runner/work/ProfileDesigner/ProfileDesigner:/src/" -e "ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true" -e "ASPNETCORE_ENVIRONMENT=Development" -e "DOTNET_USE_POLLING_FILE_WATCHER=1" -e "EnableCloudLibSearch=false" -e "ASPNETCORE_URLS=http://+:80" -e "PROFILEDESIGNER_GITHUB_WORKFLOW_COMMANDS=true" -e "MARKETPLACE_MONGODB_CONNECTIONSTRING=${{env.MONGODB_BRIDGE_CONNECTION}}" -e "MARKETPLACE_MONGODB_DATABASE=test" -p 5000:80  --entrypoint tail profile-designer-api:dev -f /dev/null

    # # # # Start Profile Designer Container (On Desktop)
    # # # - name: 15__ProfileDesigner - Start the Container (On Desktop)
    # # #   if: env.ONGITHUB == 'false'
    # # #   run: |
    # # #        docker run -dt --name CESMII.ProfileDesigner.Api --network mysubnet1 -v "C:\Users\paul\AppData\Roaming\Microsoft\UserSecrets:/root/.microsoft/usersecrets:ro" -v "C:\Users\paul\AppData\Roaming\ASP.NET\Https:/root/.aspnet/https:ro" -v "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Sdks\Microsoft.Docker.Sdk\tools\TokenService.Proxy\linux-x64\net6.0:/TokenService.Proxy:ro" -v "C:\CESMII.github\ProfileDesigner\api\CESMII.ProfileDesigner.Api:/app" -v "C:\CESMII.github\ProfileDesigner:/src/" -v "C:\Users\paul\.nuget\packages\:/root/.nuget/fallbackpackages" -e "ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS=true" -e "ASPNETCORE_ENVIRONMENT=Development" -e "ASPNETCORE_URLS=http://+:80" -e "DOTNET_USE_POLLING_FILE_WATCHER=1" -e "NUGET_PACKAGES=/root/.nuget/fallbackpackages" -e "NUGET_FALLBACK_PACKAGES=/root/.nuget/fallbackpackages" -e "EnableCloudLibSearch=false" -e "MARKETPLACE_GITHUB_WORKFLOW_COMMANDS=true" -e "MARKETPLACE_MONGODB_CONNECTIONSTRING=${{env.MONGODB_BRIDGE_CONNECTION}}" -e "MARKETPLACE_MONGODB_DATABASE=test" -p 5000:80 --entrypoint tail profile-designer-api:dev -f /dev/null

    # # # - name: 16__ProfileDesigner - Query Bridge Connection to CESMII.ProfileDesigner.Api Container
    # # #   run:
    # # #      export TEMPIPVALUE=$(docker exec -i CESMII.ProfileDesigner.Api hostname -i) ;
    # # #      echo "PROFILEDESIGNER_BRIDGE_CONNECTION=http://$TEMPIPVALUE" >> $GITHUB_ENV
    # # # ############################################################


    # # # ############################################################
    # # # # Run one of these two
    # # # # Start the Main Dll in the Container (On Github)
    # # # ##  Github can accommodate "docker exec -i.... & ", ampersand at the end!!!)
    # # # ##  In Windows, docker exec -id works better
    # # # - name: 17__ProfileDesigner - Start the Main Dll in the Container (Github)
    # # #   if: env.ONGITHUB == 'true'
    # # #   run: |
    # # #     docker exec -di CESMII.ProfileDesigner.Api dotnet /src/publish/CESMII.ProfileDesigner.Api.dll
    
    # # # # Start the Main Dll in the Container (On the Desktop)
    # # # - name: 18__ProfileDesigner - Start the Main Dll in the Container (Desktop)
    # # #   if: env.ONGITHUB == 'false'
    # # #   run: |
    # # #     docker exec -di CESMII.ProfileDesigner.Api dotnet /src/publish/CESMII.ProfileDesigner.Api.dll
    # # # ############################################################


    # # # # Testing -- Call into ProfileDesigner Rest Api from runner
    # # # - name: 19__ProfileDesigner - Rest API Basic Test
    # # #   if: always()
    # # #   run: dotnet test --filter CESMII.ProfileDesigner.Api.Tests.PostgresTableTests.CheckTableColumnCount ./api/Tests/CESMII.ProfileDesigner.Api.Tests/CESMII.ProfileDesigner.Api.Tests.csproj

    # # # - name: 20__NodeJS - Create and Start Docker Container for frontend
    # # #   run: |
    # # #     docker build . -t cesmii-profile-designer/node-web-app
    # # #     docker run -d --name=MyNodeJS -p 3000:3000 --network mysubnet1  -e "REACT_APP_BASE_API_URL=${{env.PROFILEDESIGNER_BRIDGE_CONNECTION}}:5000/api" cesmii-profile-designer/node-web-app npm run-script start-in-browser-test
    # # #   working-directory: ./frontend

    # # # - name: 21__NodeJS - Query Bridge Connection to NodeJS (FrontEnd)
    # # #   run:
    # # #      export TEMPIPVALUE=$(docker exec -i MyNodeJS hostname -i) ;
    # # #      echo "NODEJS_BRIDGE_CONNECTION=http://$TEMPIPVALUE" >> $GITHUB_ENV

    # # # ############################################################
    # # # # Run one of these two
    # # # - name: 22__Docker - Create container for selenium (Github)
    # # #   if: env.ONGITHUB == 'true'
    # # #   run: |
    # # #      docker run -d --name=MySelenium --network mysubnet1 --mount src="/home/runner/work/ProfileDesigner/ProfileDesigner",target=/src,type=bind -p 4444:4444 selenium/standalone-chrome

    # # # - name: 23__Docker - Create container for selenium (Desktop)
    # # #   if: env.ONGITHUB == 'false'
    # # #   run: |
    # # #      docker run -d --name=MySelenium --network mysubnet1 --mount src="C:/CESMII.github/ProfileDesigner",target=/src,type=bind -p 4444:4444 selenium/standalone-chrome
    # # # ############################################################

    # # # - name: 24__Selenium - Dotnet SDK Prerequisites
    # # #   run:
    # # #     docker exec -i MySelenium sudo wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb ;
    # # #     docker exec -i MySelenium sudo dpkg -i packages-microsoft-prod.deb ;
    # # #     docker exec -i MySelenium sudo rm packages-microsoft-prod.deb

    # # # - name: 25__Selenium - Dotnet SDK 6.0 Installation
    # # #   run:
    # # #     docker exec -i MySelenium sudo apt-get update ;
    # # #     docker exec -i MySelenium sudo apt-get install -y dotnet-sdk-6.0

    # # # - name: 26__In-Browser Testing - Integrity of Profile Designer Home Page
    # # #   run: |
    # # #       docker exec -i MySelenium sudo dotnet test -e NODEJS=${{env.NODEJS_BRIDGE_CONNECTION}} /src/api/Tests/CESMII.PD.Tests.InBrowser.WebPages/CESMII.PD.Tests.InBrowser.WebPages.csproj

    # # # # - name: 27__In-Browser Testing - Library Searches
    # # # #   run: |
    # # # #       docker exec -i MySelenium sudo dotnet test -e NODEJS=${{env.NODEJS_BRIDGE_CONNECTION}} /src/api/Tests/CESMII.MP.Tests.InBrowser.LibrarySearch/CESMII.MP.Tests.InBrowser.LibrarySearch.csproj

